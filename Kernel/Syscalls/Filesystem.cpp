// This file is part of PadOS.
//
// Copyright (C) 2025 Kurt Skauen <http://kavionic.com/>
//
// PadOS is free software : you can redistribute it and / or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// PadOS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with PadOS. If not, see <http://www.gnu.org/licenses/>.
///////////////////////////////////////////////////////////////////////////////
// Created: 05.09.2025 23:00

#include <string.h>
#include <fcntl.h>
#include <sys/pados_syscalls.h>

#include <Kernel/VFS/FileIO.h>

using namespace os;
using namespace kernel;

extern "C"
{

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_open(const char* path, int flags, mode_t mode)
{
    return FileIO::Open(path, flags, mode);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_openat(int dirfd, const char* path, int flags, mode_t mode)
{
    return FileIO::Open(dirfd, path, flags, mode);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

PErrorCode sys_fcntl(int file, int cmd, int arg, int* outResult)
{
    return PErrorCode::NotImplemented;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_dup(int oldFile)
{
    return FileIO::Dupe(oldFile, -1);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_dup2(int oldFile, int newFile)
{
    return FileIO::Dupe(oldFile, newFile);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_close(int file)
{
    return FileIO::Close(file);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_rename(const char* oldPath, const char* newPath)
{
    return FileIO::Rename(oldPath, newPath);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_fstat(int file, struct stat* buf)
{
    return FileIO::ReadStats(file, buf);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_stat(const char* path, struct stat* buf)
{
    int file = FileIO::Open(path, O_RDONLY);
    if (file != -1)
    {
        int result = FileIO::ReadStats(file, buf);
        FileIO::Close(file);
        return result;
    }
    return -1;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_write_stat(int file, const struct stat* value, uint32_t mask)
{
    return FileIO::WriteStats(file, *value, mask);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_isatty(int file)
{
    return -1;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

off64_t sys_lseek(int file, off64_t offset, int whence)
{
    return FileIO::Seek(file, offset, whence);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

ssize_t sys_read(int file, void* buffer, size_t length)
{
    return FileIO::Read(file, buffer, length);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

ssize_t sys_write(int file, const void* buffer, size_t length)
{
    return FileIO::Write(file, buffer, length);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int fsync(int file)
{
    return FileIO::FSync(file);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_create_directory(const char* name, mode_t permission)
{
    return FileIO::CreateDirectory(name, permission);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_create_directory_base(int baseFolderFD, const char* name, int permission)
{
    return FileIO::CreateDirectory(baseFolderFD, name, permission);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_read_directory(int handle, dirent_t* entry, size_t bufSize)
{
    return FileIO::ReadDirectory(handle, entry, bufSize);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_unlink_file(int dirfd, const char* path)
{
    return FileIO::Unlink(dirfd, path);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_remove_directory(int dirfd, const char* path)
{
    return FileIO::RemoveDirectory(dirfd, path);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

PErrorCode sys_readlink(int dirfd, const char* path, char* buffer, size_t bufferSize, size_t* outResultLength)
{
    return FileIO::ReadLink(dirfd, path, buffer, bufferSize, outResultLength);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

PErrorCode sys_symlink(const char* targetPath, int dirfd, const char* symlinkPath)
{
    return FileIO::Symlink(targetPath, dirfd, symlinkPath);
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

int sys_chdir(const char* path)
{
    errno = ENOSYS;
    return -1;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

char* sys_getcwd(char* pathBuffer, size_t bufferSize)
{
    if (bufferSize < 2) {
        errno = ERANGE;
        return nullptr;
    }
    strncpy(pathBuffer, "/", bufferSize);
    return pathBuffer;
}

} // extern "C"
