// This file is part of PadOS.
//
// Copyright (C) 2018 Kurt Skauen <http://kavionic.com/>
//
// PadOS is free software : you can redistribute it and / or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// PadOS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with PadOS. If not, see <http://www.gnu.org/licenses/>.
///////////////////////////////////////////////////////////////////////////////

#include "Ptr.h"
#include "WeakPtr.h"


///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T>
template <class Y> inline
WeakPtr<T>::WeakPtr(const SigWeakPtr<Y>& ptr)
{
    if ( ptr.m_Object != nullptr ) {
        m_Notifier = ptr.m_Object->GetNotifier();
    } else {
        m_Notifier = nullptr;
    }
    m_Object = ptr.m_Object;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T>
template <class Y> inline
WeakPtr<T>& WeakPtr<T>::operator=(const SigWeakPtr<Y>& ptr)
{
    Set(ptr.m_Object);
    return *this;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool WeakPtr<T>::operator==( const SigWeakPtr<Y>& p ) const
{
    return Get() == p.Get();
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool WeakPtr<T>::operator!=( const SigWeakPtr<Y>& p ) const
{
    return Get() != p.Get();
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool WeakPtr<T>::operator<( const SigWeakPtr<Y>& p ) const
{
    return Get() < p.Get();
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T> inline
SigWeakPtr<T>::SigWeakPtr(T* obj)
{
    m_DeleteGuard = nullptr;
    m_Object = obj;
    if ( m_Object != nullptr ) {
        m_Object->AddMonitor( this );
    }
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T> inline
SigWeakPtr<T>::SigWeakPtr(const SigWeakPtr& ptr) : PtrTargetMonitor()
{ 
    m_DeleteGuard     = nullptr;
    m_Object          = ptr.m_Object;
    SignalTargetDying = ptr.SignalTargetDying;
  
    if (m_Object != nullptr) {
        m_Object->AddMonitor(this);
    }
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T>
template <class Y> inline
SigWeakPtr<T>::SigWeakPtr(const WeakPtr<Y>& ptr)
{
    m_DeleteGuard = nullptr;
    m_Object = ptr.Get();
    if (m_Object != nullptr) {
        m_Object->AddMonitor(this);
    }
}


///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T>
template <class Y> inline
SigWeakPtr<T>::SigWeakPtr(const Ptr<Y>& ptr)
{
    m_DeleteGuard = nullptr;
    m_Object = ptr.m_Object;
    if (m_Object != nullptr) {
        m_Object->AddMonitor(this);
    }
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T> inline
SigWeakPtr<T>::~SigWeakPtr()
{
    if (m_DeleteGuard != nullptr) {
        *m_DeleteGuard = true;
    }
    if (m_Object != nullptr) {
        m_Object->RemoveMonitor(this);
    }
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T> inline
void SigWeakPtr<T>::Reset()
{
    if (m_Object != nullptr) {
        m_Object->RemoveMonitor(this);
        m_Object = nullptr;
    }
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T> inline
SigWeakPtr<T>& SigWeakPtr<T>::operator=(const SigWeakPtr& ptr)
{
    if (this != &ptr) {
        Set(ptr.m_Object);
        SignalTargetDying = ptr.SignalTargetDying;
    } else {
        printf( "SigWeakPtr assignment to self\n" );
    }
    return *this;
}
  
///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T>
template <class Y> inline
SigWeakPtr<T>& SigWeakPtr<T>::operator=(const Ptr<Y>& ptr)
{
    Set(ptr.m_Object);
    return *this;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T> inline
T* SigWeakPtr<T>::operator->() const
{
    return Get();
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool SigWeakPtr<T>::operator==( const SigWeakPtr<Y>& p ) const
{
    return m_Object == p.m_Object;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool SigWeakPtr<T>::operator!=( const SigWeakPtr<Y>& p ) const
{
    return m_Object != p.m_Object;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool SigWeakPtr<T>::operator<( const SigWeakPtr<Y>& p ) const
{
    return m_Object < p.m_Object;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool SigWeakPtr<T>::operator==( const WeakPtr<Y>& p ) const
{
    return m_Object == p.Get();
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool SigWeakPtr<T>::operator!=( const WeakPtr<Y>& p ) const
{
    return m_Object != p.Get();
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool SigWeakPtr<T>::operator<( const WeakPtr<Y>& p ) const
{
    return m_Object < p.Get();
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool SigWeakPtr<T>::operator==( const Ptr<Y>& p ) const
{
    return m_Object == p.Get();
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool SigWeakPtr<T>::operator!=( const Ptr<Y>& p ) const
{
    return m_Object != p.Get();
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T>
template <class Y> inline
bool SigWeakPtr<T>::operator<( const Ptr<Y>& p ) const
{
    return m_Object < p.Get();
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T> inline
bool SigWeakPtr<T>::operator==( const T* p ) const
{
    return m_Object == p;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T> inline
bool SigWeakPtr<T>::operator!=( const T* p ) const
{
    return m_Object != p;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T> inline
bool SigWeakPtr<T>::operator<( const T* p ) const
{
    return m_Object < p;
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

template <class T> inline
void SigWeakPtr<T>::ObjectDied()
{
    m_Object->RemoveMonitor(this);

    bool bWasDeleted = false;
    m_DeleteGuard = &bWasDeleted;
  
    SignalTargetDying( Ptr<T>(*this) );

    if ( bWasDeleted == false ) {
        m_Object      = nullptr;
        m_DeleteGuard = nullptr;
    }
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T>
template <class Y> inline
void SigWeakPtr<T>::Set(Y* obj)
{
    if (m_Object != nullptr) {
        m_Object->RemoveMonitor(this);
    }
    m_Object = obj;
    if (m_Object != nullptr) {
        m_Object->AddMonitor(this);
    }
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////
  
template <class T> inline
T* SigWeakPtr<T>::Get() const
{
    return m_Object;
}
