// This file is part of PadOS.
//
// Copyright (C) 2025 Kurt Skauen <http://kavionic.com/>
//
// PadOS is free software : you can redistribute it and / or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// PadOS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with PadOS. If not, see <http://www.gnu.org/licenses/>.
///////////////////////////////////////////////////////////////////////////////
// Created: 12.10.2025 15:00

#include <sys/pados_syscalls.h>
#include <PadOS/Time.h>

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

TimeValNanos get_monotonic_time()
{
    return TimeValNanos::FromNanoseconds(get_monotonic_time_ns());
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

TimeValNanos get_monotonic_time_hires()
{
    return TimeValNanos::FromNanoseconds(get_monotonic_time_hires_ns());
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

TimeValNanos get_real_time()
{
    return TimeValNanos::FromNanoseconds(get_real_time_ns());
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

TimeValNanos get_real_time_hires()
{
    return TimeValNanos::FromNanoseconds(get_real_time_hires_ns());
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

PErrorCode set_real_time(TimeValNanos time, bool updateRTC)
{
    return __set_real_time_ns(time.AsNanoseconds(), updateRTC);
}

///////////////////////////////////////////////////////////////////////////////
/// Return time in nano seconds where no threads or IRQ's have been executing.
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

IFLASHC TimeValNanos get_idle_time()
{
    return TimeValNanos::FromNanoseconds(get_idle_time_ns());
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

TimeValNanos get_clock_time(int clockID)
{
    return TimeValNanos::FromNanoseconds(get_clock_time_ns(clockID));
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

TimeValNanos get_clock_time_hires(int clockID)
{
    return TimeValNanos::FromNanoseconds(get_clock_time_hires_ns(clockID));
}

///////////////////////////////////////////////////////////////////////////////
/// \author Kurt Skauen
///////////////////////////////////////////////////////////////////////////////

TimeValNanos get_clock_time_offset(int clockID)
{
    return TimeValNanos::FromNanoseconds(get_clock_time_offset_ns(clockID));
}
